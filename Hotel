from tkinter import *
from PIL import ImageTk, Image
from tkinter import messagebox
from datetime import datetime
import pickle


'''
DEFINING CLASSES
'''

class Window:

	def __init__(self):
		self.window = None
		self.frame = None
		self.labels = []
		self.buttons = []
		self.entries = []
		self.radvar = None
		
	#create window
	def window_set(self):
		x = Tk()
		return x		
	#create title of window
	def title_set(self,title_text):
		self.window.title(f'{title_text}')
	#create a frame in window
	def frame_set(self,row_inp, col_inp):
		x = LabelFrame(self.window, padx=10, pady = 10)
		x.grid(row = row_inp, column = col_inp, padx = 10, pady = 5)
		return x
	#create label in frame
	def frame_label(self,text_inp,row_inp, col_inp, font, font_size, columnspan_inp):
		x = Label(self.frame, text = f'{text_inp}', font = (font,font_size))
		x.grid(row = row_inp, column = col_inp, columnspan = columnspan_inp)
		self.labels.append(x)		
	#create button in frame
	def frame_button(self, text_inp,row_inp, col_inp, function, columnspan_inp):
		x = Button(self.frame, text = f'{text_inp}', command = function)
		x.grid(row = row_inp, column = col_inp, stick = W+E+N+S, columnspan = columnspan_inp)
		self.buttons.append(x)
	#Create entrybox in frame
	def frame_entry_box(self,width_inp,row_inp, col_inp):
		x = Entry(self.frame, width = width_inp, justify = 'center')
		x.grid(row = row_inp, column = col_inp)
		self.entries.append(x)
	#change radvar in radio button for ch_in
	def radvar_ch(self, value, label,hotel):
		label.config(text = f'The chosen room is {hotel.available[int(self.radvar.get())].r_num}')
	#change radvar in radio button for ch_out
	def radvar_ch_out(self, value, label,hotel):
		label.config(text = f'The chosen room is {hotel.taken[int(self.radvar.get())].r_num}')		
	#create radiobutton in frame for ch_in
	def frame_radio(self,count,room,label_num,columnspan_inp,hotel):
		x = Radiobutton(
			self.frame, 
			text = f'Room Number {room.r_num} | Floor {room.floor} | R{room.cost} per night', 
			variable = self.radvar, value = str(count-2), 
			command = lambda: self.radvar_ch(self.radvar.get(), self.labels[label_num],hotel)
			)
		x.grid(row = count, column = 0, columnspan = columnspan_inp)
	#create radiobutton in frame for ch_out
	def frame_radio_ch_out(self,count,room,label_num,columnspan_inp,hotel):
		x = Radiobutton(
			self.frame, 
			text = f'Room Number {room.r_num} | Floor {room.floor} | Guest: {room.g_name} | Guest Number: {room.g_number} | Staying : {room.stay_length} nights | Booked: {room.date}', 
			variable = self.radvar, value = str(count-2), 
			command = lambda: self.radvar_ch_out(self.radvar.get(), self.labels[label_num],hotel)
			)
		x.grid(row = count, column = 0, columnspan = columnspan_inp)




#defining the class to track the hotel
class Hotel:

	#defining the attributes of the hotel to track the available and taken rooms
	def __init__(self):

		self.available = []
		self.taken = []

	#creating the list of rooms at the start
	def set_rooms(self, rooms ):
		for room in rooms:
			self.available.append(room)
	#defining the function that will allow for guests to check in
	def check_in(self, room, st_l,g_nam, g_num, ch_date):
		self.taken.append(room)
		self.available.remove(room)
		room.ch_in(st_l,g_nam, g_num, ch_date)
	#defining the function that will allow for guests to check out
	def check_out(self,room):
		self.available.append(room)
		self.taken.remove(room)
		room.ch_out()
			

#defining the class to track the attributes
class Room:

	#defining the attributes of the hotel
	def __init__(self,r_num,floor,cost):
		
		self.r_num = r_num
		self.floor = floor	
		self.cost = cost
		self.g_name = "Room Empty"
		self.g_number = 'Room Empty'
		self.stay_length = 'Room Empty'		
		self.date = 'Room Empty'

	#defining the function that allows the room object to be printed		
	def __str__(self):
		return f"Room {self.r_num} on floor {self.floor} costs R{self.cost} per night"

	#defining the function to check into the room
	def ch_in(self,st_l,g_nam, g_num, ch_date):
		self.g_name = g_nam
		self.g_number = g_num		
		self.stay_length = st_l
		self.date = ch_date
	#defining the function to check out of the room
	def ch_out(self):
		self.stay_length = 0
		self.g_name = 'Room Empty'
		self.g_number = 'Room Empty'
		self.date = 'Room Empty'
	#defining function that will allow for a room change
	def chng_info(self,room_number,fl_number,new_cost):
		self.r_num = room_number
		self.floor = fl_number
		self.cost = new_cost

'''
DEFINING FUNCTIONS
'''

#function to save data from the program
def close_prog():

	response = messagebox.askyesno("Close Hotel Manager 2020!", "You are about to close the program. This will save over your last save.\n Are you sure you want to close?")
	

	if response == 1:
		pickle_out = open("hotel.pickle","wb")
		pickle.dump(our_hotel, pickle_out)
		pickle_out.close()
		win_out = ()
		root.window.destroy()
	else:
		return

#function to load saved date into the program
def load_data():
	global our_hotel

	response = messagebox.askyesno("Loading data!", "You are about to load the last save. This overwrite any changes you have made since.\n Are you sure you want to load?")

	if response == 1:
		pickle_in = open("hotel.pickle","rb")
		our_hotel = pickle.load(pickle_in)
		pickle_in.close()
		root.frame_label(f'Available rooms:{len(our_hotel.available)} | Occupied rooms: {len(our_hotel.taken)}',2,0,'Arial',13,1)
	else:
		return

def func():
	pass

#Function used in the button Add room on the room setup window
def submit():
	global Room, stp_win	

	#checking to see if the information entered is in the correct format or if it has been entered already
	try:
		#retrieving the information from the entry boxes
		r_number = int(stp_win.entries[0].get())
		fl_num = int(stp_win.entries[1].get())
		cost = int(stp_win.entries[2].get())
		#checking if any entries are negative
		if r_number < 0 or fl_num  < 0 or cost< 0:
			response = messagebox.showerror("Input Error!", "Please make sure you have entered positive numbers")
			return
		#checking if the room being added is already in the new rooms list
		for room in new_rooms:
			if str(r_number) == room.r_num:
				response = messagebox.showerror("Input Error!", f"Room number {r_number}, already in the list to be added to the hotel, please use a different room number")
				return
		#checking if the room being added is already in the hotel
		for room in our_hotel.available:
			if str(r_number) == room.r_num:
				response = messagebox.showerror("Input Error!", f"Room number {r_number}, already exists in the hotel, please use a different room number")
				return
	#Final catch in case they have entered letters or other symbols
	except:
		response = messagebox.showerror("ERROR!", "Please make sure you have filled each block with only the numerical value.")
		return


	#Creating new Room class object and appending it to new_rooms
	new_room = Room(str(r_number),str(fl_num),cost)
	new_rooms.append(new_room)
	#Updating the Number of rooms label
	stp_win.labels[3].config(text = f'Number of rooms created: {len(new_rooms)}')
	#Clearing entry
	stp_win.entries[0].delete(0,END)
	stp_win.entries[1].delete(0,END)
	stp_win.entries[2].delete(0,END)


#function for the button that closes the setup window and adds the new_rooms list to our_hotel's available rooms attribute
def close_sup_win():
	global new_rooms	

	our_hotel.set_rooms(new_rooms)
	stp_win.window.destroy()
	new_rooms = []
	root.frame_label(f'Available rooms:{len(our_hotel.available)} | Occupied rooms: {len(our_hotel.taken)}',2,0,'Arial',13,1)


#function for the button setup rooms on the opening window. Creates the setup window
def sup_win():
	global stp_win
	
	#creating room setup window
	stp_win = Window()	
	stp_win.window = stp_win.window_set()
	stp_win.title_set("Room Setup")
	stp_win.frame = stp_win.frame_set(0,0)

	#setting the labels for room details
	stp_win.frame_label('Room Number',2,0,'Arial',10,1)
	stp_win.frame_label('Floor room is on',3,0,'Arial',10,1)
	stp_win.frame_label('Cost per night',4,0,'Arial',10,1)

	#setting entry boxes for room details
	stp_win.frame_entry_box(30,2, 1)
	stp_win.frame_entry_box(30,3, 1)
	stp_win.frame_entry_box(30,4, 1)	

	#label to show how many rooms were added
	stp_win.frame_label(f'Number of rooms created: {len(new_rooms)}',5,0,'Arial',10,2)

	#setting buttons
	stp_win.frame_button('Add Room',6, 0, submit, 2)
	stp_win.frame_button('Close window and add new rooms',7, 0, close_sup_win, 2)


#function for the check cost button on the check in window.
def cost_check():	
	global checkin_win

	try:
		var = float(checkin_win.entries[3].get())
		equ = var*float(our_hotel.available[int(checkin_win.radvar.get())].cost)

		if var < 0 or equ <0:
			response = messagebox.showerror("Input Error!", "Please a positive number for the length of the stay")
			return
	except:
		response = messagebox.showerror("Input Error!", f"Please only enter the number of the amount of nights the guest is staying")
		return

	checkin_win.labels[6].config(text = f'R{equ}')


#function to close the check in winndow and load the check in, into the system
def close_checkin():
	global checkin_win
	time = datetime.now()
	room = our_hotel.available[int(checkin_win.radvar.get())]
	g_nam = f'{checkin_win.entries[0].get()} {checkin_win.entries[1].get()}'
	g_num = checkin_win.entries[2].get()
	st_l = checkin_win.entries[3].get()
	ch_date = time.strftime("%d/%m/%Y %H:%M:%S")
	our_hotel.check_in(room, st_l,g_nam, g_num, ch_date)
	checkin_win.window.destroy()
	root.frame_label(f'Available rooms:{len(our_hotel.available)} | Occupied rooms: {len(our_hotel.taken)}',2,0,'Arial',13,1)
	


#function for the check in guest button on the opening window. Creates the check in window
def ch_in_win():

	global checkin_win

	if len(our_hotel.available) == 0:
		response = messagebox.showerror("No available rooms!", f"It appears you have no available rooms at the moment.\nEither they are all occupied or you haven't set up your rooms.")
		return


	#creating room setup window
	checkin_win = Window()	
	checkin_win.window = checkin_win.window_set()
	checkin_win.title_set("Check guest in")
	checkin_win.frame = checkin_win.frame_set(0,0)

	#creating variables
	checkin_win.radvar = StringVar(checkin_win.window)
	checkin_win.radvar.set('0')
	count = 2

	#Letting the user know what room number is selected.
	checkin_win.frame_label(f'The chosen room is {our_hotel.available[int(checkin_win.radvar.get())].r_num}',1,0,'Arial',10,2)


	#Looping through the available rooms to create the radio buttons of the rooms
	for room in our_hotel.available:
		checkin_win.frame_radio(count,room,0,2,our_hotel)
		count += 1

	#guest details labels and entry boxes	
	checkin_win.frame_label('Guest First Name:',count,0,'Arial',10,1)
	checkin_win.frame_entry_box(30,count, 1)
	count += 1
	checkin_win.frame_label('Guest Last Name:',count,0,'Arial',10,1)
	checkin_win.frame_entry_box(30,count, 1)
	count += 1
	checkin_win.frame_label('Guest Phone Number:',count,0,'Arial',10,1)
	checkin_win.frame_entry_box(30,count, 1)
	count += 1
	checkin_win.frame_label('Number of nights:',count,0,'Arial',10,1)
	checkin_win.frame_entry_box(30,count, 1)
	checkin_win.entries[3].insert(1,'1')
	count += 1
	
	#Display the cost of the stay with the nights stayed and cost of the room
	checkin_win.frame_label('Cost for the stay:',count,0,'Arial',10,1)
	checkin_win.frame_label(f'R{float(checkin_win.entries[3].get())*float(our_hotel.available[int(checkin_win.radvar.get())].cost)}',count,1,'Arial',10,1)
	count += 1

	#setting buttons for the window
	checkin_win.frame_button('Check Cost of stay',count, 0, cost_check, 2)
	count += 1
	checkin_win.frame_button('Close window and check guest in',count, 0, close_checkin, 2)
	

def close_ch_out():
	global checkout_win

	room = our_hotel.taken[int(checkout_win.radvar.get())]
	our_hotel.check_out(room)
	checkout_win.window.destroy()
	root.frame_label(f'Available rooms:{len(our_hotel.available)} | Occupied rooms: {len(our_hotel.taken)}',2,0,'Arial',13,1)


#function for the check in guest button on the opening window. Creates the check in window
def ch_out_win():

	global checkout_win

	if len(our_hotel.taken) == 0:
		response = messagebox.showerror("No available rooms!", f"It appears you have no occupied rooms at the moment.\nPlease make sure all your guest have been checked in correctly or you have loaded your lastest saved data.")
		return

	#creating room setup window
	checkout_win = Window()	
	checkout_win.window = checkout_win.window_set()
	checkout_win.title_set("Check guest out")
	checkout_win.frame = checkout_win.frame_set(0,0)

	#creating variables
	checkout_win.radvar = StringVar(checkout_win.window)
	checkout_win.radvar.set('0')
	count = 2

	#Letting the user know what room number is selected.
	checkout_win.frame_label(f'The chosen room is {our_hotel.taken[int(checkout_win.radvar.get())].r_num}',1,0,'Arial',10,2)


	#Looping through the available rooms to create the radio buttons of the rooms
	for room in our_hotel.taken:
		checkout_win.frame_radio_ch_out(count,room,0,2,our_hotel)
		count += 1

	checkout_win.frame_button('Close window and check out guest',count, 0, close_ch_out, 2)


#function for select room function in change room details window
def room_select():
	global chnge_room, new_ind 
	

	#clearing previous data in entry boxes
	chnge_room.entries[1].delete(0,END)
	chnge_room.entries[2].delete(0,END)
	chnge_room.entries[3].delete(0,END)

	#Checking if correct input has been entered
	new_ind = None

	try:
		ind1 = None
		ind2 = None
		x = int(chnge_room.entries[0].get())
		count1 = 0
		count2 = 0
		for room in our_hotel.available:		
			if room.r_num == str(x):
				ind1 = count1
			count1 +=1
		for room in our_hotel.taken:
			if room.r_num == str(x):
				ind2 = count2
			count2 +=1
		if ind1 == None and ind2 == None:
			response = messagebox.showerror("Input Error!", "This room doesn't exist")
			return
	except:
		response = messagebox.showerror("Input Error!", "You need to just enter the number of the room")

	#entering the information into the entry boxes
	if ind2 == None:
		chnge_room.entries[1].insert(1,our_hotel.available[ind1].r_num)
		chnge_room.entries[2].insert(1,our_hotel.available[ind1].floor)
		chnge_room.entries[3].insert(1,our_hotel.available[ind1].cost)
		new_ind = (ind1, 'A')
	else:
		chnge_room.entries[1].insert(1,our_hotel.taken[ind2].r_num)
		chnge_room.entries[2].insert(1,our_hotel.taken[ind2].floor)
		chnge_room.entries[3].insert(1,our_hotel.taken[ind2].cost)
		new_ind = (ind2, 'T')



#function to close and svae changes in change room details window
def close_chnge_room():
	global chnge_room

	try:
		#retrieving the information from the entry boxes
		r_number = int(chnge_room.entries[1].get())
		fl_num = int(chnge_room.entries[2].get())
		cost = int(chnge_room.entries[3].get())
		#checking if any entries are negative
		if r_number < 0 or fl_num  < 0 or cost< 0:
			response = messagebox.showerror("Input Error!", "Please make sure you have entered positive numbers")
			return
		
	#Final catch in case they have entered letters or other symbols
	except:
		response = messagebox.showerror("ERROR!", "Please make sure you have filled each block with only the numerical value.")
		return

		
	if new_ind[1] == 'A':
		our_hotel.available[new_ind[0]].chng_info(str(r_number),str(fl_num),cost)
	else:
		our_hotel.taken[new_ind[0]].chng_info(str(r_number),str(fl_num),cost)

	chnge_room.window.destroy()
	new_rooms = []


#function to drive the change room details window from the button on the home window
def change_room():
	global chnge_room, new_ind

	if len(our_hotel.available) == 0 and len(our_hotel.taken) == 0:
		response = messagebox.showerror("No available rooms!", f"It appears you have no rooms at the moment.\nYou haven't set up your rooms yet. Please go to the 'Setup your hotel rooms' window instead!")
		return


	#creating room setup window
	chnge_room = Window()	
	chnge_room.window = chnge_room.window_set()
	chnge_room.title_set("Change Room Details")
	chnge_room.frame = chnge_room.frame_set(0,0)

	#setting the labels for room details
	chnge_room.frame_label('Which room would you like to change?',0,0,'Arial',10,1)
	chnge_room.frame_label('Room Number',2,0,'Arial',10,1)
	chnge_room.frame_label('Floor room is on',3,0,'Arial',10,1)
	chnge_room.frame_label('Cost per night',4,0,'Arial',10,1)

	#setting entry boxes for room details
	chnge_room.frame_entry_box(30,0, 1)
	chnge_room.frame_entry_box(30,2, 1)
	chnge_room.frame_entry_box(30,3, 1)
	chnge_room.frame_entry_box(30,4, 1)	

	#setting buttons
	chnge_room.frame_button('Select Room',1, 0, room_select, 2)
	chnge_room.frame_button('Close window and add new rooms',7, 0, close_chnge_room, 2)


'''
SETTING GLOBAL VARIABLES TO TRACK
'''

new_rooms = []
our_hotel = Hotel()

'''
CREATING HOME WINDOW
'''

#creating the window
root = Window()
root.window = root.window_set()
root.title_set("Hotel Booking")
root.frame = root.frame_set(0,0)

#setting the welcoming labels 
root.frame_label("Hotel Manager 2020",0,0,"Helvetica",20,1)
root.frame_label('Welcome and thank you for choosing Hotel Manager 2020!\n\nIf this is your first time using this program, click on the "Setup your hotel rooms" button and enter the details\nof the rooms in your hotel. If not simply click on "Load last saved hotel data" to continue where you left off.',1,0,'Arial',10,1)
root.frame_label(f'\nAvailable rooms:{len(our_hotel.available)} | Occupied rooms: {len(our_hotel.taken)}\n',2,0,'Arial',13,1)

#setting buttons for opening window
root.frame_button("Setup your hotel rooms",3,0,sup_win,1)
root.frame_button("Change room details",4,0,change_room,1)
root.frame_button("Check guest in",5,0,ch_in_win,1)
root.frame_button("Check guest out",6,0,ch_out_win,1)
root.frame_button("Load last saved hotel data",7,0,load_data,1)
root.frame_button("Close program and save data",8,0,close_prog,1)

#allowing to program to loop and stay open
root.window.mainloop()
